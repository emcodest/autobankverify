#!/usr/bin/env node

require("dotenv").config()

let server = ""
/**
 * Get port from environment and store in Express.
 */
let app = require('../app');
const logic = require("../lib/AppLogic")
let debug = require('debug')(`${process.env.APP_NAME}:server`);
let port = normalizePort(process.env.PORT || '50000');
app.set('port', port);
console.log('====## IS_APP_LIVE======', process.env.IS_APP_LIVE)
console.log('====## APP PORT======', process.env.PORT)
console.log('====## APP NAME======', process.env.APP_NAME)
console.log('====## ENVIRONMENT======', process.env.NODE_ENV)
if(process.env.IS_APP_LIVE == "true"){
  // ONLY ON PRODUCTION
  console.log('====RUUNING WITH SSL======')
  var path = require("path")
  const cert = path.join(__dirname, "..", "..", "bundle.crt")
  const key_x = path.join(__dirname, "..", "..", "server.key")
  console.log('====SSL PATHS======', cert, key_x)
  let fs = require('fs');
  let https = require('https');

  // HTTPS
  let privateKey = fs.readFileSync(key_x, 'utf8');
  let certificate = fs.readFileSync(cert, 'utf8');

  let credentials = {
    key: privateKey,
    cert: certificate
  };

  server = https.createServer(credentials, app);
}else{
  console.log('====WITHOUT SSL======')
 
  let http = require('http');
  server = http.createServer(app);
}

logic.CreateDefaultAccounts().then(_accounts => {
  // console.log('==========', _accounts)

})

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('===############ SERVER START ON =======', bind)
  console.log('===############ LIVE ENVIRONMENT =======', process.env.IS_APP_LIVE )
}
